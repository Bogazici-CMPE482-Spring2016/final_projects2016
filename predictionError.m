function [NormE, QR, SVD] = predictionError(dataSet,A,seasonLength,predictionLength)
[numOfItems, numOfMonths] = size(dataSet);

NormE = zeros(predictionLength,numOfItems);
QR = zeros(predictionLength,numOfItems);
SVD = zeros(predictionLength,numOfItems);
for i=1:numOfItems
    b = dataSet(i,1:end-1)';
    % Normal Equations
    params = linsolve(A(:,:,i),b);
    predictions = zeros(predictionLength,1);
    a = zeros(1,seasonLength+1);
    for t=1:predictionLength
        if t==1, a(1)=A(end,1,i); else a(1)=predictions(t-1); end
        for s=1:seasonLength
            a(s+1) = mod(numOfMonths+t,seasonLength) == s;
        end
        predictions(t) = a*params;
    end
    NormE(:,i) = predictions;
    
    % QR Decomposition
    [Q R] = qr(A(:,:,i),0);
    opts.UT = true;
    params = linsolve(R,Q'*b,opts);
    predictions = zeros(predictionLength,1);
    a = zeros(1,seasonLength+1);
    for t=1:predictionLength
        if t==1, a(1)=A(end,1,i); else a(1)=predictions(t-1); end
        for s=1:seasonLength
            a(s+1) = mod(numOfMonths+t,seasonLength) == s;
        end
        predictions(t) = a*params;
    end
    QR(:,i) = predictions';
    
    % SVD Decomposition
    [U S V] = svd(A(:,:,i),0);
    S_inv = 1./S;
    S_inv(isinf(S_inv)) = 0;
    params = V*S_inv*U'*b;
    predictions = zeros(predictionLength,1);
    a = zeros(1,seasonLength+1);
    for t=1:predictionLength
        if t==1, a(1)=A(end,1,i); else a(1)=predictions(t-1); end
        for s=1:seasonLength
            a(s+1) = mod(numOfMonths+t,seasonLength) == s;
        end
        predictions(t) = a*params;
    end
    SVD(:,i) = predictions';
    fprintf('Item: %d \n',i);
    header = ['Total relative error between predictions generated by different computational methods\n' ...
    'NormE: Normal Equations\n' ...
    'QR : QR decomposition\n' ...
    'SVD : SVD Decomposition\n'];
    fprintf(header);

    table_header = '\t NormE \t\t QR \t\t SVD\n';
    fprintf(table_header);
    row1 = 'NormE: \t %E \t %E \t %E \n';
    fprintf(row1,0,norm(NormE(:,i)-QR(:,i))/norm(QR(:,i)),norm(NormE(:,i)-SVD(:,i))/norm(SVD(:,i)));
    row2 = 'QR: \t %E \t %E \t %E \n';
    fprintf(row2,norm(QR(:,i)-NormE(:,i))/norm(NormE(:,i)),0,norm(QR(:,i)-SVD(:,i))/norm(SVD(:,i)));
    row3 = 'SVD: \t %E \t %E \t %E \n\n';
    fprintf(row3,norm(SVD(:,i)-NormE(:,i))/norm(NormE(:,i)),norm(SVD(:,i)-QR(:,i))/norm(QR(:,i)),0);

end

end